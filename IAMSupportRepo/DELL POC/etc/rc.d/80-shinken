#!/bin/bash

### BEGIN INIT INFO
# Provides:          shinken
# Required-Start:    $local_fs
# Required-Stop:     $local_fs
# Default-Start:     2 3 4 5
# Default-Stop:      S 0 1 6
# Short-Description: shinken
# Description:       shinken monitoring daemon
### END INIT INFO

cd /omd/sites/idaas_mon
. .profile
. lib/omd/init_profile
. etc/omd/site.conf
[ "$CONFIG_CORE" = "shinken" ] || exit 5

NAME="shinken"
SCRIPTNAME=$0
BIN="/omd/sites/idaas_mon/bin"
RUN="/omd/sites/idaas_mon/tmp/shinken/run"
VAR="/omd/sites/idaas_mon/var"
ETC="/omd/sites/idaas_mon/tmp/shinken"
TMP="/omd/sites/idaas_mon/tmp"

#
# Directory with raw data and fragment files
#
SOURCE_ETC=/omd/sites/idaas_mon/etc/shinken

#
# Directories where the final config files reside
#
TARGET_ETC=/omd/sites/idaas_mon/tmp/shinken
TARGET_ETC_FOR_NAGIOS=/omd/sites/idaas_mon/tmp/nagios

#
# OMD-Config-Settings and default values
#
SHINKEN_ARBITER_PORT=${CONFIG_SHINKEN_ARBITER_PORT:=localhost:7770}
SHINKEN_SCHEDULER_PORT=${CONFIG_SHINKEN_SCHEDULER_PORT:=localhost:7768}
SHINKEN_POLLER_PORT=${CONFIG_SHINKEN_POLLER_PORT:=localhost:7771}
SHINKEN_REACTIONNER_PORT=${CONFIG_SHINKEN_REACTIONNER_PORT:=localhost:7769}
SHINKEN_BROKER_PORT=${CONFIG_SHINKEN_BROKER_PORT:=localhost:7772}
SHINKEN_WEBUI_TCP_PORT=${CONFIG_SHINKEN_WEBUI_TCP_PORT:=localhost:7767}
#
# If it is just the port number, force localhost to be the address
#
if [ "${SHINKEN_ARBITER_PORT##*:}" = "${SHINKEN_ARBITER_PORT%%:*}" ]; then
  SHINKEN_ARBITER_PORT="localhost:$SHINKEN_ARBITER_PORT"
fi
if [ "${SHINKEN_SCHEDULER_PORT##*:}" = "${SHINKEN_SCHEDULER_PORT%%:*}" ]; then
  SHINKEN_SCHEDULER_PORT="localhost:$SHINKEN_SCHEDULER_PORT"
fi
if [ "${SHINKEN_POLLER_PORT##*:}" = "${SHINKEN_POLLER_PORT%%:*}" ]; then
  SHINKEN_POLLER_PORT="localhost:$SHINKEN_POLLER_PORT"
fi
if [ "${SHINKEN_REACTIONNER_PORT##*:}" = "${SHINKEN_REACTIONNER_PORT%%:*}" ]; then
  SHINKEN_REACTIONNER_PORT="localhost:$SHINKEN_REACTIONNER_PORT"
fi
if [ "${SHINKEN_BROKER_PORT##*:}" = "${SHINKEN_BROKER_PORT%%:*}" ]; then
  SHINKEN_BROKER_PORT="localhost:$SHINKEN_BROKER_PORT"
fi
if [ "${SHINKEN_WEBUI_TCP_PORT##*:}" = "${SHINKEN_WEBUI_TCP_PORT%%:*}" ]; then
  SHINKEN_WEBUI_TCP_PORT="localhost:$SHINKEN_WEBUI_TCP_PORT"
fi
SHINKEN_ARBITERD_PORT=${CONFIG_SHINKEN_ARBITER_PORT}
SHINKEN_SCHEDULERD_PORT=${CONFIG_SHINKEN_SCHEDULER_PORT}
SHINKEN_POLLERD_PORT=${CONFIG_SHINKEN_POLLER_PORT}
SHINKEN_REACTIONNERD_PORT=${CONFIG_SHINKEN_REACTIONNER_PORT}
SHINKEN_BROKERD_PORT=${CONFIG_SHINKEN_BROKER_PORT}
SHINKEN_WEBUI_TCP_PORT=${CONFIG_SHINKEN_WEBUI_TCP_PORT}
WEB=${CONFIG_DEFAULT_GUI:=nagios}
LIVESTATUS_TCP=${CONFIG_LIVESTATUS_TCP:=off}
LIVESTATUS_TCP_PORT=${CONFIG_LIVESTATUS_TCP_PORT:=6557}
NSCA=${CONFIG_NSCA:=off}
NSCA_TCP_PORT=${CONFIG_NSCA_TCP_PORT:=5667}
PNP4NAGIOS=${CONFIG_PNP4NAGIOS:=on}
MONGODB=${CONFIG_MONGODB:=off}
MONGODB_TCP_PORT=${CONFIG_MONGODB_TCP_PORT:=27017}

#
# Pyro and multiprocessing have been installed locally
# The python search path must be extended to the 
# local installation directory
#
export PYTHONPATH=/omd/sites/idaas_mon/lib/python:/omd/sites/idaas_mon/lib/shinken

#
# The Shinken processes to start
#
AVAIL_MODULES="scheduler poller reactionner broker arbiter"

#
# OMD: create configuration file out of fragments
#
case "$1" in start|restart|reload|checkconfig|check)
    #
    # Step 1
    #   etc/shinken/shinken.d/*.cfg
    # + etc/shinken/shinken.cfg
    # = tmp/shinken/shinken.cfg
    #
    merge-shinken-config \
       $SOURCE_ETC/shinken.d/*.cfg \
       $SOURCE_ETC/shinken.cfg \
       > $TARGET_ETC/shinken.cfg || rm -f $TARGET_ETC/shinken.cfg

    #
    # Step 2
    # copy etc/shinken/shinken-specific.d to tmp/shinken/shinken-specific.d
    # modify the files in tmp/shinken/shinken-specific.d
    #
    rm -rf $TARGET_ETC/shinken-specific.d
    cp -r $SOURCE_ETC/shinken-specific.d $TARGET_ETC
    cat <<EOTXT > $SOURCE_ETC/shinken-specific.d/README
Do not edit the files in this directory. They were copied over from
$SOURCE_ETC/shinken-specific.d and will be written to ../shinken-specific.cfg
EOTXT
    #
    # Change the listener ports in the process sections 
    #
    sed -ri 's/^([[:space:]]*port[[:space:]]*)([0-9]+)/\1'${SHINKEN_ARBITER_PORT##*:}'/' $TARGET_ETC/shinken-specific.d/arbiter.cfg
    sed -ri 's/^([[:space:]]*port[[:space:]]*)([0-9]+)/\1'${SHINKEN_SCHEDULER_PORT##*:}'/' $TARGET_ETC/shinken-specific.d/scheduler.cfg
    sed -ri 's/^([[:space:]]*port[[:space:]]*)([0-9]+)/\1'${SHINKEN_POLLER_PORT##*:}'/' $TARGET_ETC/shinken-specific.d/poller.cfg
    sed -ri 's/^([[:space:]]*port[[:space:]]*)([0-9]+)/\1'${SHINKEN_REACTIONNER_PORT##*:}'/' $TARGET_ETC/shinken-specific.d/reactionner.cfg
    sed -ri 's/^([[:space:]]*port[[:space:]]*)([0-9]+)/\1'${SHINKEN_BROKER_PORT##*:}'/' $TARGET_ETC/shinken-specific.d/broker.cfg
    #
    # Change the listener address in the process sections 
    #
    sed -ri 's/^([[:space:]]*address[[:space:]]*)([0-9]+)/\1'${SHINKEN_ARBITER_PORT%%:*}'/' $TARGET_ETC/shinken-specific.d/arbiter.cfg
    sed -ri 's/^([[:space:]]*address[[:space:]]*)([0-9]+)/\1'${SHINKEN_SCHEDULER_PORT%%:*}'/' $TARGET_ETC/shinken-specific.d/scheduler.cfg
    sed -ri 's/^([[:space:]]*address[[:space:]]*)([0-9]+)/\1'${SHINKEN_POLLER_PORT%%:*}'/' $TARGET_ETC/shinken-specific.d/poller.cfg
    sed -ri 's/^([[:space:]]*address[[:space:]]*)([0-9]+)/\1'${SHINKEN_REACTIONNER_PORT%%:*}'/' $TARGET_ETC/shinken-specific.d/reactionner.cfg
    sed -ri 's/^([[:space:]]*address[[:space:]]*)([0-9]+)/\1'${SHINKEN_BROKER_PORT%%:*}'/' $TARGET_ETC/shinken-specific.d/broker.cfg
    #
    # All webservers except these two use livestatus
    #
    if [ "$WEB" != "nagios" -a "$WEB" != "none" ] ; then
      sed -ri 's/^([[:space:]]*modules[[:space:]]*)(.+)/\1\2,Livestatus/' $TARGET_ETC/shinken-specific.d/broker.cfg
    fi
    # 
    # This is commented out because livestatus tcp is handled by an extra xinetd
    # The broker would crash if it tried to open the port himself
    #
    #if [ "$LIVESTATUS_TCP" = "on" ]; then
    #  sed -ri 's/^([[:space:]]*port[[:space:]]*)(.+)/\1'${LIVESTATUS_TCP_PORT}'/' $TARGET_ETC/shinken-specific.d/module_livestatus.cfg
    #else
    #  sed -ri 's/^([[:space:]]*port[[:space:]]*)(.+)/\1none/' $TARGET_ETC/shinken-specific.d/module_livestatus.cfg
    #fi
    #
    # Remove the xinet-mk-livestatus-config if we listen on a port ourselves
    #
    if [ "$LIVESTATUS_TCP" = "on" ]; then
      test -f /omd/sites/idaas_mon/etc/mk-livestatus/xinetd.conf && rm -f /omd/sites/idaas_mon/etc/mk-livestatus/xinetd.conf
    fi
    #
    # Add the npcd module to the broker
    #
    if [ "$PNP4NAGIOS" = "on" ]; then
      sed -ri 's/^([[:space:]]*modules[[:space:]]*)(.+)/\1\2,NPCD/' $TARGET_ETC/shinken-specific.d/broker.cfg
    fi
    #
    if [ "$SHINKEN_WEBUI_TCP_PORT" != "none" ]; then
      sed -ri 's/^([[:space:]]*modules[[:space:]]*)(.+)/\1\2,WebUI/' $TARGET_ETC/shinken-specific.d/broker.cfg
      sed -ri 's/^([[:space:]]*host[[:space:]]*)(.+)/\1'0.0.0.0'/' $TARGET_ETC/shinken-specific.d/module_webui.cfg
      sed -ri 's/^([[:space:]]*port[[:space:]]*)([0-9]+)/\1'${SHINKEN_WEBUI_TCP_PORT}'/' $TARGET_ETC/shinken-specific.d/module_webui.cfg
    fi
    #
    # Add the nsca module to the arbiter
    # uncomment this if the arbiter listens
    # leave the comments if an external nsca daemon is used
    #if [ "$NSCA" = "on" ]; then
    #  sed -ri 's/^([[:space:]]*modules[[:space:]]*)(.+)/\1\2,NSCA/' $TARGET_ETC/shinken-specific.d/arbiter.cfg
    #  sed -ri 's/^([[:space:]]*port[[:space:]]*)([0-9]+)/\1'${NSCA_TCP_PORT}'/' $TARGET_ETC/shinken-specific.d/module_nsca_server.cfg
    #fi
    if [ "$MONGODB" = "on" ]; then
      sed -ri 's/^([[:space:]]*modules[[:space:]]*)(.+)/\1mongologs/' $TARGET_ETC/shinken-specific.d/module_livestatus.cfg
      sed -ri 's/^([[:space:]]*mongodb_uri[[:space:]]*)(.+)/\1mongodb:\/\/MONGODB_TCP_PORT/' $TARGET_ETC/shinken-specific.d/module_livestatus.cfg
      if [ "${MONGODB_TCP_PORT##*:}" = "${MONGODB_TCP_PORT%%:*}" ]; then
        sed -ri "s/MONGODB_TCP_PORT/127.0.0.1:$MONGODB_TCP_PORT/" $TARGET_ETC/shinken-specific.d/module_livestatus.cfg
      else
        sed -ri "s/MONGODB_TCP_PORT/$MONGODB_TCP_PORT/" $TARGET_ETC/shinken-specific.d/module_livestatus.cfg
      fi
    else
      sed -ri 's/^([[:space:]]*modules[[:space:]]*)(.+)/\1sqlitelogs/' $TARGET_ETC/shinken-specific.d/module_livestatus.cfg
    fi

    #
    # Step 3
    #   tmp/shinken/shinken-specific.d/*.cfg
    # = tmp/shinken/shinken-specific.cfg
    #
    merge-shinken-specific-config \
       $TARGET_ETC/shinken-specific.d/*.cfg \
       > $TARGET_ETC/shinken-specific.cfg || rm -f $TARGET_ETC/shinken-specific.cfg

    #
    # Step 4.1
    # modify the port-variables needed for the daemon-ini-files
    # remove daemons from AVAILABLE_MODULES if set to none
    if [ "${SHINKEN_SCHEDULERD_PORT}" = "none" ]; then
      AVAIL_MODULES=${AVAIL_MODULES/scheduler/}
    elif [ "${SHINKEN_SCHEDULERD_PORT##*:}" = "${SHINKEN_SCHEDULERD_PORT%%:*}" ]; then
      SHINKEN_SCHEDULERD_PORT="0.0.0.0:$SHINKEN_SCHEDULERD_PORT"
    elif [ "${SHINKEN_SCHEDULERD_PORT%%:*}" = "localhost" ]; then
      SHINKEN_SCHEDULERD_PORT=${SHINKEN_SCHEDULERD_PORT/localhost/127.0.0.1}
    fi
    if [ "${SHINKEN_POLLERD_PORT}" = "none" ]; then
      AVAIL_MODULES=${AVAIL_MODULES/poller/}
    elif [ "${SHINKEN_POLLERD_PORT##*:}" = "${SHINKEN_POLLERD_PORT%%:*}" ]; then
      SHINKEN_POLLERD_PORT="0.0.0.0:$SHINKEN_POLLERD_PORT"
    elif [ "${SHINKEN_POLLERD_PORT%%:*}" = "localhost" ]; then
      SHINKEN_POLLERD_PORT=${SHINKEN_POLLERD_PORT/localhost/127.0.0.1}
    fi
    if [ "${SHINKEN_REACTIONNERD_PORT}" = "none" ]; then
      AVAIL_MODULES=${AVAIL_MODULES/reactionner/}
    elif [ "${SHINKEN_REACTIONNERD_PORT##*:}" = "${SHINKEN_REACTIONNERD_PORT%%:*}" ]; then
      SHINKEN_REACTIONNERD_PORT="0.0.0.0:$SHINKEN_REACTIONNERD_PORT"
    elif [ "${SHINKEN_REACTIONNERD_PORT%%:*}" = "localhost" ]; then
      SHINKEN_REACTIONNERD_PORT=${SHINKEN_REACTIONNERD_PORT/localhost/127.0.0.1}
    fi
    if [ "${SHINKEN_BROKERD_PORT}" = "none" ]; then
      AVAIL_MODULES=${AVAIL_MODULES/broker/}
    elif [ "${SHINKEN_BROKERD_PORT##*:}" = "${SHINKEN_BROKERD_PORT%%:*}" ]; then
      SHINKEN_BROKERD_PORT="0.0.0.0:$SHINKEN_BROKERD_PORT"
    elif [ "${SHINKEN_BROKERD_PORT%%:*}" = "localhost" ]; then
      SHINKEN_BROKERD_PORT=${SHINKEN_BROKERD_PORT/localhost/127.0.0.1}
    fi 
    if [ "${SHINKEN_ARBITERD_PORT}" = "none" ]; then
      AVAIL_MODULES=${AVAIL_MODULES/arbiter/}
    elif [ "${SHINKEN_ARBITERD_PORT##*:}" = "${SHINKEN_ARBITERD_PORT%%:*}" ]; then
      SHINKEN_ARBITERD_PORT="0.0.0.0:$SHINKEN_ARBITERD_PORT"
    elif [ "${SHINKEN_ARBITERD_PORT%%:*}" = "localhost" ]; then
      SHINKEN_ARBITERD_PORT=${SHINKEN_ARBITERD_PORT/localhost/127.0.0.1}
    fi

    #
    # Step 4.2
    # copy etc/shinken/shinken-ini.d/*.ini to tmp/shinken
    # modify the ini-files in tmp/shinken
    #
    cp $SOURCE_ETC/shinken-ini.d/*.ini $TARGET_ETC
    sed -ri 's/^([[:space:]]*port[[:space:]]*=[[:space:]]*)([0-9]+)/\1'${SHINKEN_SCHEDULERD_PORT##*:}'/' $TARGET_ETC/schedulerd.ini
    sed -ri 's/^([[:space:]]*port[[:space:]]*=[[:space:]]*)([0-9]+)/\1'${SHINKEN_POLLERD_PORT##*:}'/' $TARGET_ETC/pollerd.ini
    sed -ri 's/^([[:space:]]*port[[:space:]]*=[[:space:]]*)([0-9]+)/\1'${SHINKEN_REACTIONNERD_PORT##*:}'/' $TARGET_ETC/reactionnerd.ini
    sed -ri 's/^([[:space:]]*port[[:space:]]*=[[:space:]]*)([0-9]+)/\1'${SHINKEN_BROKERD_PORT##*:}'/' $TARGET_ETC/brokerd.ini
    sed -ri 's/^([[:space:]]*host[[:space:]]*=[[:space:]]*)(.+)/\1'${SHINKEN_SCHEDULERD_PORT%%:*}'/' $TARGET_ETC/schedulerd.ini
    sed -ri 's/^([[:space:]]*host[[:space:]]*=[[:space:]]*)(.+)/\1'${SHINKEN_POLLERD_PORT%%:*}'/' $TARGET_ETC/pollerd.ini
    sed -ri 's/^([[:space:]]*host[[:space:]]*=[[:space:]]*)(.+)/\1'${SHINKEN_REACTIONNERD_PORT%%:*}'/' $TARGET_ETC/reactionnerd.ini
    sed -ri 's/^([[:space:]]*host[[:space:]]*=[[:space:]]*)(.+)/\1'${SHINKEN_BROKERD_PORT%%:*}'/' $TARGET_ETC/brokerd.ini

    #
    # Force creation of a run-directory for the pid-files
    #
    test -d ${RUN} || mkdir -p ${RUN}

    #
    # Now something ugly. The cgi scripts of the classical web interface
    # can't handle shinken-specific settings in the main config file.
    # Create a nagios.cfg-compatible shinken.cfg
    #
    cp $TARGET_ETC/shinken.cfg $TARGET_ETC/shinken-apache.cfg
    #
    # Remove settings which are unknown to the cgis
    #
    SHINKEN_ONLY_PARAMS="shinken_user shinken_group"
    for param in $SHINKEN_ONLY_PARAMS; do
      sed -ri 's/^([[:space:]]*'${param}')/#\1/' $TARGET_ETC/shinken-apache.cfg
    done
    #
    # Add settings which are unknown to Shinken or configured in
    # brokers' configuration file
    #
    cat <<-EOTXT >> $TARGET_ETC/shinken-apache.cfg
	check_result_path=$TMP
	status_file=$TARGET_ETC_FOR_NAGIOS/status.dat
	object_cache_file=$VAR/nagios/objects.cache
	check_external_commands=1
	log_file=$VAR/nagios/nagios.log
EOTXT
    ;;
stop|status)
    # only update the AVAIL_MODULES list
    if [ "${SHINKEN_SCHEDULERD_PORT}" = "none" ]; then
      AVAIL_MODULES=${AVAIL_MODULES/scheduler/} 
    fi
    if [ "${SHINKEN_POLLERD_PORT}" = "none" ]; then
      AVAIL_MODULES=${AVAIL_MODULES/poller/}
    fi
    if [ "${SHINKEN_REACTIONNERD_PORT}" = "none" ]; then
      AVAIL_MODULES=${AVAIL_MODULES/reactionner/}
    fi
    if [ "${SHINKEN_BROKERD_PORT}" = "none" ]; then
      AVAIL_MODULES=${AVAIL_MODULES/broker/}
    fi 
    if [ "${SHINKEN_ARBITERD_PORT}" = "none" ]; then
      AVAIL_MODULES=${AVAIL_MODULES/arbiter/}
    fi
    ;; 
esac

usage() {
    echo "Usage: $SCRIPTNAME {start|stop|restart|status|check} [ <$AVAIL_MODULES> ]" >&2
    echo ""                                                                           >&2
    echo ""                                                                           >&2
    exit 3
}

CMD=$1
shift
SUBMODULES=$*

if [ -z "$SUBMODULES" ]; then
    SUBMODULES=$AVAIL_MODULES
else
    # verify given modules
    for mod1 in $SUBMODULES; do
        found=0
        for mod2 in $AVAIL_MODULES; do
            [ $mod1 = $mod2 ] && found=1;
        done
        [ $found = 0 ] && usage
    done
fi


#
# return the pid for a submodule
#
getmodpid() {
    mod=$1
    pidfile="$RUN/${mod}d.pid"
    if [ -s $pidfile ]; then
        cat $pidfile
    fi
}

#
# stop modules
#
do_stop() {
    ok=0
    fail=0
    for mod in $SUBMODULES; do
        pid=`getmodpid $mod`;
        printf "%-15s: " $mod
        if [ ! -z $pid ]; then
            maxkill=5
            running=$(ps -aefw | grep $pid | grep "shinken-" | wc -l)
            while [ $running -gt 0 -a $maxkill -gt 0 ]; do
                for cpid in $(ps -aefw | grep $pid | grep "shinken-" | awk '{print $2}' | sort -g -r); do
                    kill $cpid > /dev/null 2>&1
                    #printf "."
                done
                sleep 1
                maxkill=$(($maxkill - 1))
                running=$(ps -aefw | grep $pid | grep "shinken-" | wc -l)
            done
            if [ $running -gt 0 ]; then
                echo "FAIL"
                # stop means stop
                for cpid in $(ps -aefw | grep $OMD_SITE | grep "shinken-$mod" | awk '{print $2}' | sort -g -r); do
                    kill -9 $cpid > /dev/null 2>&1
                    #printf "."
                done
            else
                echo "OK"
            fi
        else
            echo "OK"
        fi
    done 
    return 0
}

#
# Display status
#
do_status() {
    MODULES=$1
    [ -z $MODULES ] && MODULES=$SUBMODULES;
    ok=0
    fail=0
    echo "status $NAME: ";
    for mod in $MODULES; do
        pid=`getmodpid $mod`;
        printf "%-15s: " $mod
        if [ ! -z $pid ]; then
            ps -p $pid >/dev/null 2>&1
            if [ $? = 0 ]; then
                echo "RUNNING (pid $pid)"
                ok=$((ok+1))
            else
                echo "NOT RUNNING"
                fail=$((fail+1))
            fi
        else
            echo "NOT RUNNING"
            fail=$((fail+1))
        fi
    done
    if [ $fail -gt 0 ]; then
        return 1
    fi
    return 0
}

#
# start our modules
#
do_start() {
    for mod in $SUBMODULES; do
        printf "%-15s: " $mod
        `do_status $mod  > /dev/null 2>&1`
        if [ $? = 0 ]; then
            pid=`getmodpid $mod`;
            echo "ALREADY RUNNING (pid $pid)"
        else
            if [ "$mod" = "broker" ]; then
                rm -f $TMP/run/nagios.cmd
            fi
            if [ $mod != "arbiter" ]; then
                output=`$BIN/shinken-${mod} -d -c $ETC/${mod}d.ini $DEBUGCMD 2>&1`
            else
                output=`$BIN/shinken-${mod} -d -c $ETC/shinken.cfg -c $ETC/shinken-specific.cfg $DEBUGCMD 2>&1`
            fi
            if [ $? = 0 ]; then
                echo "OK"
            else
                output=`echo "$output" | tail -1` # only show one line of error output...
                printf "FAILED: " 
                echo "$output" 
                exit 1
            fi
        fi
    done
}

#
# do the config check
#
do_check() {
    $BIN/shinken-arbiter -v -c $ETC/shinken.cfg -c $ETC/shinken-specific.cfg $DEBUGCMD 2>&1
    return $?
}

#
# check for our command
#
__init_hook $0 $1 pre
case "$CMD" in
  start)
    [ "$VERBOSE" != no ] && echo "Starting $NAME..."
    do_start
    ;;
  stop)
    [ "$VERBOSE" != no ] && echo "Stopping $NAME..."
    do_stop
    ;;
  reload)
    [ "$VERBOSE" != no ] && echo "Reloading arbiter..."
    $0 restart arbiter
    ;;
  restart)
    [ "$VERBOSE" != no ] && echo "Restarting $NAME..."
    do_stop
    do_start
    ;;
  status)
    do_status
    ;;
  check|checkconfig)
    do_check
    case "$?" in
        0) echo OK ;;
        *) echo FAIL; exit 1;; # Failed config check
    esac
    ;;
  *)
    usage;
    ;;
esac
