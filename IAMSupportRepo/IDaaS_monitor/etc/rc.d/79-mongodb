#!/bin/bash

# chkconfig: 345 99 01
# description: Mongo is a scalable, document-oriented database.
# processname: mongod
# config: /omd/sites/idaas/etc/mongodb/mongod.conf
# pidfile: /omd/sites/idaas/tmp/run/mongo.pid

### BEGIN INIT INFO
# Provides:       mongod
# Required-Start:
# Required-Stop:
# Default-Start:  2 3 5
# Default-Stop:
# Description:    Mongo is a scalable, document-oriented database.
### END INIT INFO

# Author: Gerhard Lausser <gerhard.lausser@consol.de>

# Notes for OMD init script requirements
# - Must handle omd config options like daemon enabling/disabling
# - When a daemon is disabled by omd config it needs
#   to return an exit code of 5.
# - The init script must output an exit code of 2 when
#   an unknown param is used.
# - In general the exit code for succeeded actions is
#   0 and for failed actions it is 1.
# - There are exceptions for the exit code handling:
#   - When a service is already stopped and should be
#     restarted/stopped, it should result in an exit code of 0.
#   - FIXME: What if a service should be started and is already started?
# - When a restart is requested and the program is still not running
#   the script should only execute a start
# - When a restart is requested and the program can not be stopped the
#   script should terminate without starting the daemon
# - When a reload is requested and the program is not running
#   the init script should execute a start instead

cd /omd/sites/idaas
. /omd/sites/idaas/.profile
. /omd/sites/idaas/etc/omd/site.conf
[ "$CONFIG_MONGODB" = "on" ] || exit 5

ulimit -v unlimited

BIN=/omd/sites/idaas/bin/mongod
CFG_FILE=/omd/sites/idaas/tmp/mongodb/mongod.cfg
PID_FILE=/omd/sites/idaas/tmp/lock/mongo.lock
DATA_DIR=/omd/sites/idaas/var/mongodb
USR=idaas
GRP=idaas

# OMD: create configuration file out of fragments
case "$1" in start|restart|reload|checkconfig|check)
    mkdir -p $DATA_DIR
    mkdir -p $(dirname $CFG_FILE) 
    merge-nagios-config \
        /omd/sites/idaas/etc/mongodb/mongod.cfg \
        /omd/sites/idaas/etc/mongodb/mongod.d/* \
        > $CFG_FILE || rm -f $CFG_FILE
esac

OPTIONS="--quiet --config $CFG_FILE"

# Fetches the pid of the currently running mongod process of the given
# user.
#
# --ppid 1 in ps seem not to filter by direct ppid but by the whole
# parent process tree. So filter by hand again.
#
# It returns 1 when no process can be found and echos the PID while
# returning 0 when a process can be found.
pidof_mongod() {
    pgrep -u $OMD_SITE -o -P 1 -fx "$BIN $OPTIONS" 2>/dev/null
}

verify_config() {
    if [ "$1" != "quiet" ]; then
        echo -n "Running configuration check... "
    fi
    RESULT=$($BIN -pv $CFG_FILE 2>&1)
    if [ $? -eq 0 ]; then
        if [ "$1" != "quiet" ]; then
            echo "done."
        fi
        return 0
    else
        if [ "$1" != "quiet" ]; then
            echo "CONFIG ERROR! Aborted. Check your Mongodb configuration."
        fi
        echo "$RESULT" >&2
        return 1
    fi
}

prep_start() {
    if [ -f $CMD_FILE ]; then
        rm -f $CMD_FILE
    fi
    touch $PID_FILE
    chown $USR:$GRP $PID_FILE
}

mongod_wait_stop() {
    pid=$(pidof_mongod) || {
        echo -n 'not running...'
        return 0
    }

    # wait until really stopped.
    # it might happen that mongod has a subprocess which
    # is left running and becomes ppid 1 after killing the
    # main mongod process. So fetch the process id again
    # multiple times to fetch new processes until all are gone.
    $BIN $OPTIONS --shutdown  >/dev/null 2>&1
    I=0
    while kill -0 $pid >/dev/null 2>&1; do
        # Send single kill per process
        #kill $pid
        while kill -0 $pid  >/dev/null 2>&1;  do
            if [ $I = '60' ]; then
                return 1
            else
                echo -n "."
                I=$(($I+1))
                sleep 1
            fi
        done
        # Is there another proc with ppid 1?
        pid=$(pidof_mongod) || break
    done

    rm -f "$PID_FILE"
}

if [ ! -f $BIN ]; then
    echo "Mongod binary $BIN not found. Terminating..."
    exit 1
fi

case "$1" in start|restart|reload|checkconfig)
    if [ ! -f $CFG_FILE ]; then
        echo "Mongod configuration file $CFG_FILE not found. Terminating..."
        exit 1
    fi
esac

case "$1" in
    start)
         if pidof_mongod >/dev/null 2>&1; then
             echo 'Already running.'
             exit 1
         fi
         echo -n "Starting mongod: "
         $BIN $OPTIONS >/dev/null 2>&1
         RETVAL=$?
         if [ $RETVAL -eq 0 ]; then
             echo 'OK'
             exit 0
         else
             echo 'ERROR'
             exit 1
         fi
    ;;
    stop)
        echo -n "Stopping mongod..."
        if mongod_wait_stop; then
            rm -f $PID_FILE
            echo 'OK'
            exit 0
        else
            echo 'ERROR'
            exit 1
        fi
    ;;
    check|checkconfig)
        if ! verify_config; then
            exit 1
        fi
        exit 0
    ;;
    status)
        if pid=$(pidof_mongod 2>&1)
        then
            echo "Running ($pid)."
        else
            echo 'Not running.'
            exit 1
        fi
    ;;
    restart)
        if ! verify_config; then
            exit 1
        fi

        $0 stop || (echo "Unable to stop mongod. Terminating..." && exit 1)
        echo -n "Starting mongod..."
        if mongod_wait_start; then
            echo 'OK'
            exit 0
        else
            echo 'ERROR'
            exit 1
        fi
    ;;

    reload|force-reload)
        if ! verify_config; then
            exit 1
        fi

        # Execute a start when mongod is not running
        if ! pid=$(pidof_mongod) 2>&1; then
            $0 start
            exit $?
        fi

        echo -n "Reloading mongod configuration (PID: $pid)... "
        if kill -HUP $pid >/dev/null 2>&1; then
            echo 'OK'
            exit 0
        else
            $0 restart
            exit $?
        fi
    ;;

    *)
        echo "Usage: mongodb {start|stop|restart|reload|status|checkconfig}"
        exit 2
    ;;
esac

# EOF

